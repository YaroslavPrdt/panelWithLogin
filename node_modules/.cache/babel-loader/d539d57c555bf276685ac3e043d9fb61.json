{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { push } from 'react-router-redux';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport classnames from 'classnames';\nimport { linkToRecord } from 'ra-core';\nimport DatagridCell from './DatagridCell';\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var basePath = _a.basePath,\n      children = _a.children,\n      classes = _a.classes,\n      className = _a.className,\n      rowClick = _a.rowClick,\n      id = _a.id,\n      isLoading = _a.isLoading,\n      onToggleItem = _a.onToggleItem,\n      push = _a.push,\n      record = _a.record,\n      resource = _a.resource,\n      selected = _a.selected,\n      style = _a.style,\n      styles = _a.styles,\n      rest = __rest(_a, [\"basePath\", \"children\", \"classes\", \"className\", \"rowClick\", \"id\", \"isLoading\", \"onToggleItem\", \"push\", \"record\", \"resource\", \"selected\", \"style\", \"styles\"]);\n\n  return rest;\n};\n\nvar DatagridRow =\n/** @class */\nfunction (_super) {\n  __extends(DatagridRow, _super);\n\n  function DatagridRow() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.handleToggle = function (event) {\n      _this.props.onToggleItem(_this.props.id);\n\n      event.stopPropagation();\n    };\n\n    _this.handleClick = function () {\n      var _a = _this.props,\n          basePath = _a.basePath,\n          rowClick = _a.rowClick,\n          id = _a.id,\n          push = _a.push;\n      if (!rowClick) return;\n\n      if (rowClick === 'edit') {\n        push(linkToRecord(basePath, id));\n      }\n\n      if (rowClick === 'show') {\n        push(linkToRecord(basePath, id, 'show'));\n      }\n\n      if (typeof rowClick === 'function') {\n        push(rowClick(id, basePath));\n      }\n    };\n\n    return _this;\n  }\n\n  DatagridRow.prototype.render = function () {\n    var _a = this.props,\n        basePath = _a.basePath,\n        children = _a.children,\n        classes = _a.classes,\n        className = _a.className,\n        hasBulkActions = _a.hasBulkActions,\n        hover = _a.hover,\n        id = _a.id,\n        record = _a.record,\n        resource = _a.resource,\n        selected = _a.selected,\n        style = _a.style,\n        styles = _a.styles,\n        rest = __rest(_a, [\"basePath\", \"children\", \"classes\", \"className\", \"hasBulkActions\", \"hover\", \"id\", \"record\", \"resource\", \"selected\", \"style\", \"styles\"]);\n\n    return React.createElement(TableRow, __assign({\n      className: className,\n      key: id,\n      style: style,\n      hover: hover,\n      onClick: this.handleClick\n    }, sanitizeRestProps(rest)), hasBulkActions && React.createElement(TableCell, {\n      padding: \"none\"\n    }, React.createElement(Checkbox, {\n      color: \"primary\",\n      className: \"select-item \" + classes.checkbox,\n      checked: selected,\n      onClick: this.handleToggle\n    })), React.Children.map(children, function (field, index) {\n      return field ? React.createElement(DatagridCell, __assign({\n        key: id + \"-\" + (field.props.source || index),\n        className: classnames(\"column-\" + field.props.source, classes.rowCell),\n        record: record,\n        id: id\n      }, {\n        field: field,\n        basePath: basePath,\n        resource: resource\n      })) : null;\n    }));\n  };\n\n  return DatagridRow;\n}(Component);\n\nDatagridRow.propTypes = {\n  basePath: PropTypes.string,\n  children: PropTypes.node,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  hasBulkActions: PropTypes.bool.isRequired,\n  hover: PropTypes.bool,\n  id: PropTypes.any,\n  onToggleItem: PropTypes.func,\n  push: PropTypes.func,\n  record: PropTypes.object.isRequired,\n  resource: PropTypes.string,\n  rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  selected: PropTypes.bool,\n  style: PropTypes.object,\n  styles: PropTypes.object\n};\nDatagridRow.defaultProps = {\n  hasBulkActions: false,\n  hover: true,\n  record: {},\n  selected: false\n}; // wat? TypeScript looses the displayName if we don't set it explicitly\n\nDatagridRow.displayName = 'DatagridRow';\nexport default connect(null, {\n  push: push\n})(DatagridRow);","map":null,"metadata":{},"sourceType":"module"}