{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { reducer as formReducer } from 'redux-form';\nimport { TranslationProvider } from 'ra-core';\nimport merge from 'lodash/merge';\nvar defaultStore = {\n  admin: {\n    resources: {},\n    references: {\n      possibleValues: {}\n    },\n    ui: {\n      viewVersion: 1\n    }\n  },\n  form: formReducer(),\n  i18n: {\n    locale: 'en',\n    messages: {}\n  }\n};\n/**\n * Simulate a react-admin context in unit tests\n *\n * Pass custom store values as store prop\n *\n * @example\n * // in an enzyme test\n * const wrapper = render(\n *     <AdminContext store={{ admin: { resources: { post: { data: { 1: {id: 1, title: 'foo' } } } } } }}>\n *         <Show {...defaultShowProps} />\n *     </AdminContext>\n * );\n */\n\nvar TestContext = function TestContext(_a) {\n  var store = _a.store,\n      children = _a.children;\n  var storeWithDefault = createStore(function () {\n    return merge(store, defaultStore);\n  });\n  return React.createElement(Provider, {\n    store: storeWithDefault\n  }, React.createElement(TranslationProvider, null, children));\n};\n\nTestContext.propTypes = {\n  store: PropTypes.object,\n  children: PropTypes.node\n};\nTestContext.defaultProps = {\n  store: {}\n};\nexport default TestContext;","map":null,"metadata":{},"sourceType":"module"}