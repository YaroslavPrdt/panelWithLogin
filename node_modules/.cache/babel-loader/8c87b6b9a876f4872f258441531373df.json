{"ast":null,"code":"import { GET_LIST, GET_ONE, CREATE, UPDATE, UPDATE_MANY, DELETE, DELETE_MANY, GET_MANY, GET_MANY_REFERENCE } from '../dataFetchActions';\nexport var CRUD_GET_LIST = 'RA/CRUD_GET_LIST';\nexport var CRUD_GET_LIST_LOADING = 'RA/CRUD_GET_LIST_LOADING';\nexport var CRUD_GET_LIST_FAILURE = 'RA/CRUD_GET_LIST_FAILURE';\nexport var CRUD_GET_LIST_SUCCESS = 'RA/CRUD_GET_LIST_SUCCESS';\nexport var crudGetList = function crudGetList(resource, pagination, sort, filter) {\n  return {\n    type: CRUD_GET_LIST,\n    payload: {\n      pagination: pagination,\n      sort: sort,\n      filter: filter\n    },\n    meta: {\n      resource: resource,\n      fetch: GET_LIST,\n      onFailure: {\n        notification: {\n          body: 'ra.notification.http_error',\n          level: 'warning'\n        }\n      }\n    }\n  };\n};\nexport var CRUD_GET_ALL = 'RA/CRUD_GET_ALL';\nexport var CRUD_GET_ALL_LOADING = 'RA/CRUD_GET_ALL_LOADING';\nexport var CRUD_GET_ALL_FAILURE = 'RA/CRUD_GET_ALL_FAILURE';\nexport var CRUD_GET_ALL_SUCCESS = 'RA/CRUD_GET_ALL_SUCCESS';\nexport var crudGetAll = function crudGetAll(resource, sort, filter, maxResults, callback) {\n  return {\n    type: CRUD_GET_ALL,\n    payload: {\n      sort: sort,\n      filter: filter,\n      pagination: {\n        page: 1,\n        perPage: maxResults\n      }\n    },\n    meta: {\n      resource: resource,\n      fetch: GET_LIST,\n      onSuccess: {\n        callback: callback\n      },\n      onFailure: {\n        notification: {\n          body: 'ra.notification.http_error',\n          level: 'warning'\n        }\n      }\n    }\n  };\n};\nexport var CRUD_GET_ONE = 'RA/CRUD_GET_ONE';\nexport var CRUD_GET_ONE_LOADING = 'RA/CRUD_GET_ONE_LOADING';\nexport var CRUD_GET_ONE_FAILURE = 'RA/CRUD_GET_ONE_FAILURE';\nexport var CRUD_GET_ONE_SUCCESS = 'RA/CRUD_GET_ONE_SUCCESS';\nexport var crudGetOne = function crudGetOne(resource, id, basePath, refresh) {\n  if (refresh === void 0) {\n    refresh = true;\n  }\n\n  return {\n    type: CRUD_GET_ONE,\n    payload: {\n      id: id\n    },\n    meta: {\n      resource: resource,\n      fetch: GET_ONE,\n      basePath: basePath,\n      onFailure: {\n        notification: {\n          body: 'ra.notification.item_doesnt_exist',\n          level: 'warning'\n        },\n        redirectTo: 'list',\n        refresh: refresh\n      }\n    }\n  };\n};\nexport var CRUD_CREATE = 'RA/CRUD_CREATE';\nexport var CRUD_CREATE_LOADING = 'RA/CRUD_CREATE_LOADING';\nexport var CRUD_CREATE_FAILURE = 'RA/CRUD_CREATE_FAILURE';\nexport var CRUD_CREATE_SUCCESS = 'RA/CRUD_CREATE_SUCCESS';\nexport var crudCreate = function crudCreate(resource, data, basePath, redirectTo) {\n  if (redirectTo === void 0) {\n    redirectTo = 'edit';\n  }\n\n  return {\n    type: CRUD_CREATE,\n    payload: {\n      data: data\n    },\n    meta: {\n      resource: resource,\n      fetch: CREATE,\n      onSuccess: {\n        notification: {\n          body: 'ra.notification.created',\n          level: 'info',\n          messageArgs: {\n            smart_count: 1\n          }\n        },\n        redirectTo: redirectTo,\n        basePath: basePath\n      },\n      onFailure: {\n        notification: {\n          body: 'ra.notification.http_error',\n          level: 'warning'\n        }\n      }\n    }\n  };\n};\nexport var CRUD_UPDATE = 'RA/CRUD_UPDATE';\nexport var CRUD_UPDATE_LOADING = 'RA/CRUD_UPDATE_LOADING';\nexport var CRUD_UPDATE_FAILURE = 'RA/CRUD_UPDATE_FAILURE';\nexport var CRUD_UPDATE_SUCCESS = 'RA/CRUD_UPDATE_SUCCESS';\nexport var CRUD_UPDATE_OPTIMISTIC = 'RA/CRUD_UPDATE_OPTIMISTIC';\nexport var crudUpdate = function crudUpdate(resource, id, data, previousData, basePath, redirectTo) {\n  if (redirectTo === void 0) {\n    redirectTo = 'show';\n  }\n\n  return {\n    type: CRUD_UPDATE,\n    payload: {\n      id: id,\n      data: data,\n      previousData: previousData\n    },\n    meta: {\n      resource: resource,\n      fetch: UPDATE,\n      onSuccess: {\n        notification: {\n          body: 'ra.notification.updated',\n          level: 'info',\n          messageArgs: {\n            smart_count: 1\n          }\n        },\n        redirectTo: redirectTo,\n        basePath: basePath\n      },\n      onFailure: {\n        notification: {\n          body: 'ra.notification.http_error',\n          level: 'warning'\n        }\n      }\n    }\n  };\n};\nexport var CRUD_UPDATE_MANY = 'RA/CRUD_UPDATE_MANY';\nexport var CRUD_UPDATE_MANY_LOADING = 'RA/CRUD_UPDATE_MANY_LOADING';\nexport var CRUD_UPDATE_MANY_FAILURE = 'RA/CRUD_UPDATE_MANY_FAILURE';\nexport var CRUD_UPDATE_MANY_SUCCESS = 'RA/CRUD_UPDATE_MANY_SUCCESS';\nexport var CRUD_UPDATE_MANY_OPTIMISTIC = 'RA/CRUD_UPDATE_MANY_OPTIMISTIC';\nexport var crudUpdateMany = function crudUpdateMany(resource, ids, data, basePath, refresh) {\n  if (refresh === void 0) {\n    refresh = true;\n  }\n\n  return {\n    type: CRUD_UPDATE_MANY,\n    payload: {\n      ids: ids,\n      data: data\n    },\n    meta: {\n      resource: resource,\n      fetch: UPDATE_MANY,\n      cancelPrevious: false,\n      onSuccess: {\n        notification: {\n          body: 'ra.notification.updated',\n          level: 'info',\n          messageArgs: {\n            smart_count: ids.length\n          }\n        },\n        basePath: basePath,\n        refresh: refresh,\n        unselectAll: true\n      },\n      onFailure: {\n        notification: {\n          body: 'ra.notification.http_error',\n          level: 'warning'\n        }\n      }\n    }\n  };\n};\nexport var CRUD_DELETE = 'RA/CRUD_DELETE';\nexport var CRUD_DELETE_LOADING = 'RA/CRUD_DELETE_LOADING';\nexport var CRUD_DELETE_FAILURE = 'RA/CRUD_DELETE_FAILURE';\nexport var CRUD_DELETE_SUCCESS = 'RA/CRUD_DELETE_SUCCESS';\nexport var CRUD_DELETE_OPTIMISTIC = 'RA/CRUD_DELETE_OPTIMISTIC';\nexport var crudDelete = function crudDelete(resource, id, previousData, basePath, redirectTo) {\n  if (redirectTo === void 0) {\n    redirectTo = 'list';\n  }\n\n  return {\n    type: CRUD_DELETE,\n    payload: {\n      id: id,\n      previousData: previousData\n    },\n    meta: {\n      resource: resource,\n      fetch: DELETE,\n      onSuccess: {\n        notification: {\n          body: 'ra.notification.deleted',\n          level: 'info',\n          messageArgs: {\n            smart_count: 1\n          }\n        },\n        redirectTo: redirectTo,\n        basePath: basePath\n      },\n      onFailure: {\n        notification: {\n          body: 'ra.notification.http_error',\n          level: 'warning'\n        }\n      }\n    }\n  };\n};\nexport var CRUD_DELETE_MANY = 'RA/CRUD_DELETE_MANY';\nexport var CRUD_DELETE_MANY_LOADING = 'RA/CRUD_DELETE_MANY_LOADING';\nexport var CRUD_DELETE_MANY_FAILURE = 'RA/CRUD_DELETE_MANY_FAILURE';\nexport var CRUD_DELETE_MANY_SUCCESS = 'RA/CRUD_DELETE_MANY_SUCCESS';\nexport var CRUD_DELETE_MANY_OPTIMISTIC = 'RA/CRUD_DELETE_MANY_OPTIMISTIC';\nexport var crudDeleteMany = function crudDeleteMany(resource, ids, basePath, refresh) {\n  if (refresh === void 0) {\n    refresh = true;\n  }\n\n  return {\n    type: CRUD_DELETE_MANY,\n    payload: {\n      ids: ids\n    },\n    meta: {\n      resource: resource,\n      fetch: DELETE_MANY,\n      onSuccess: {\n        notification: {\n          body: 'ra.notification.deleted',\n          level: 'info',\n          messageArgs: {\n            smart_count: ids.length\n          }\n        },\n        basePath: basePath,\n        refresh: refresh,\n        unselectAll: true\n      },\n      onFailure: {\n        notification: {\n          body: 'ra.notification.http_error',\n          level: 'warning'\n        }\n      }\n    }\n  };\n};\nexport var CRUD_GET_MANY = 'RA/CRUD_GET_MANY';\nexport var CRUD_GET_MANY_LOADING = 'RA/CRUD_GET_MANY_LOADING';\nexport var CRUD_GET_MANY_FAILURE = 'RA/CRUD_GET_MANY_FAILURE';\nexport var CRUD_GET_MANY_SUCCESS = 'RA/CRUD_GET_MANY_SUCCESS'; // Reference related actions\n\nexport var crudGetMany = function crudGetMany(resource, ids) {\n  return {\n    type: CRUD_GET_MANY,\n    payload: {\n      ids: ids\n    },\n    meta: {\n      resource: resource,\n      fetch: GET_MANY,\n      onFailure: {\n        notification: {\n          body: 'ra.notification.http_error',\n          level: 'warning'\n        }\n      }\n    }\n  };\n};\nexport var CRUD_GET_MATCHING = 'RA/CRUD_GET_MATCHING';\nexport var CRUD_GET_MATCHING_LOADING = 'RA/CRUD_GET_MATCHING_LOADING';\nexport var CRUD_GET_MATCHING_FAILURE = 'RA/CRUD_GET_MATCHING_FAILURE';\nexport var CRUD_GET_MATCHING_SUCCESS = 'RA/CRUD_GET_MATCHING_SUCCESS';\nexport var crudGetMatching = function crudGetMatching(reference, relatedTo, pagination, sort, filter) {\n  return {\n    type: CRUD_GET_MATCHING,\n    payload: {\n      pagination: pagination,\n      sort: sort,\n      filter: filter\n    },\n    meta: {\n      resource: reference,\n      relatedTo: relatedTo,\n      fetch: GET_LIST,\n      onFailure: {\n        notification: {\n          body: 'ra.notification.http_error',\n          level: 'warning'\n        }\n      }\n    }\n  };\n};\nexport var CRUD_GET_MANY_REFERENCE = 'RA/CRUD_GET_MANY_REFERENCE';\nexport var CRUD_GET_MANY_REFERENCE_LOADING = 'RA/CRUD_GET_MANY_REFERENCE_LOADING';\nexport var CRUD_GET_MANY_REFERENCE_FAILURE = 'RA/CRUD_GET_MANY_REFERENCE_FAILURE';\nexport var CRUD_GET_MANY_REFERENCE_SUCCESS = 'RA/CRUD_GET_MANY_REFERENCE_SUCCESS';\nexport var crudGetManyReference = function crudGetManyReference(reference, target, id, relatedTo, pagination, sort, filter, source) {\n  return {\n    type: CRUD_GET_MANY_REFERENCE,\n    payload: {\n      target: target,\n      id: id,\n      pagination: pagination,\n      sort: sort,\n      filter: filter,\n      source: source\n    },\n    meta: {\n      resource: reference,\n      relatedTo: relatedTo,\n      fetch: GET_MANY_REFERENCE,\n      onFailure: {\n        notification: {\n          body: 'ra.notification.http_error',\n          level: 'warning'\n        }\n      }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}