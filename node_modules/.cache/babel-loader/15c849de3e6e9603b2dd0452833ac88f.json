{"ast":null,"code":"import { Children } from 'react';\nimport PropTypes from 'prop-types';\nimport Polyglot from 'node-polyglot';\nimport { connect } from 'react-redux';\nimport { compose, withContext } from 'recompose';\nimport defaultMessages from 'ra-language-english';\nimport defaultsDeep from 'lodash/defaultsDeep';\n/**\n * Creates a translation context, available to its children\n *\n * Must be called withing a Redux app.\n *\n * @example\n *     const MyApp = () => (\n *         <Provider store={store}>\n *             <TranslationProvider locale=\"fr\" messages={messages}>\n *                 <!-- Child components go here -->\n *             </TranslationProvider>\n *         </Provider>\n *     );\n */\n\nvar TranslationProvider = function TranslationProvider(_a) {\n  var children = _a.children;\n  return Children.only(children);\n};\n\nTranslationProvider.propTypes = {\n  locale: PropTypes.string.isRequired,\n  messages: PropTypes.object,\n  children: PropTypes.element\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    locale: state.i18n.locale,\n    messages: state.i18n.messages\n  };\n};\n\nvar withI18nContext = withContext({\n  translate: PropTypes.func.isRequired,\n  locale: PropTypes.string.isRequired\n}, function (_a) {\n  var locale = _a.locale,\n      _b = _a.messages,\n      messages = _b === void 0 ? {} : _b;\n  var polyglot = new Polyglot({\n    locale: locale,\n    phrases: defaultsDeep({}, messages, defaultMessages)\n  });\n  return {\n    locale: locale,\n    translate: polyglot.t.bind(polyglot)\n  };\n});\nexport default compose(connect(mapStateToProps), withI18nContext)(TranslationProvider);","map":null,"metadata":{},"sourceType":"module"}