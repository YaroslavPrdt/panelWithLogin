{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport compose from 'recompose/compose';\nimport inflection from 'inflection';\nimport { parse } from 'query-string';\nimport translate from '../i18n/translate';\nimport { crudCreate as crudCreateAction } from '../actions';\n/**\n * Page component for the Create view\n *\n * The `<Create>` component renders the page title and actions.\n * It is not responsible for rendering the actual form -\n * that's the job of its child component (usually `<SimpleForm>`),\n * to which it passes pass the `record` as prop.\n *\n * The `<Create>` component accepts the following props:\n *\n * - title\n * - actions\n *\n * Both expect an element for value.\n *\n * @example\n *     // in src/posts.js\n *     import React from 'react';\n *     import { Create, SimpleForm, TextInput } from 'react-admin';\n *\n *     export const PostCreate = (props) => (\n *         <Create {...props}>\n *             <SimpleForm>\n *                 <TextInput source=\"title\" />\n *             </SimpleForm>\n *         </Create>\n *     );\n *\n *     // in src/App.js\n *     import React from 'react';\n *     import { Admin, Resource } from 'react-admin';\n *\n *     import { PostCreate } from './posts';\n *\n *     const App = () => (\n *         <Admin dataProvider={...}>\n *             <Resource name=\"posts\" create={PostCreate} />\n *         </Admin>\n *     );\n *     export default App;\n */\n\nvar CreateController =\n/** @class */\nfunction (_super) {\n  __extends(CreateController, _super);\n\n  function CreateController(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.save = function (record, redirect) {\n      _this.props.crudCreate(_this.props.resource, record, _this.props.basePath, redirect);\n    };\n\n    var _a = _this.props,\n        _b = _a.location,\n        state = _b.state,\n        search = _b.search,\n        record = _a.record;\n    _this.record = state && state.record ? state.record : search ? parse(search, {\n      arrayFormat: 'bracket'\n    }) : record;\n    return _this;\n  }\n\n  CreateController.prototype.defaultRedirectRoute = function () {\n    var _a = this.props,\n        hasShow = _a.hasShow,\n        hasEdit = _a.hasEdit;\n    if (hasEdit) return 'edit';\n    if (hasShow) return 'show';\n    return 'list';\n  };\n\n  CreateController.prototype.render = function () {\n    var _a = this.props,\n        basePath = _a.basePath,\n        children = _a.children,\n        isLoading = _a.isLoading,\n        resource = _a.resource,\n        translate = _a.translate;\n    if (!children) return null;\n    var resourceName = translate(\"resources.\" + resource + \".name\", {\n      smart_count: 1,\n      _: inflection.humanize(inflection.singularize(resource))\n    });\n    var defaultTitle = translate('ra.page.create', {\n      name: \"\" + resourceName\n    });\n    return children({\n      isLoading: isLoading,\n      defaultTitle: defaultTitle,\n      save: this.save,\n      resource: resource,\n      basePath: basePath,\n      record: this.record,\n      redirect: this.defaultRedirectRoute(),\n      translate: translate\n    });\n  };\n\n  return CreateController;\n}(Component);\n\nexport { CreateController };\nCreateController.propTypes = {\n  basePath: PropTypes.string.isRequired,\n  children: PropTypes.func.isRequired,\n  crudCreate: PropTypes.func.isRequired,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasList: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  isLoading: PropTypes.bool.isRequired,\n  location: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n  record: PropTypes.object,\n  resource: PropTypes.string.isRequired,\n  title: PropTypes.any,\n  translate: PropTypes.func.isRequired\n};\nCreateController.defaultProps = {\n  record: {}\n};\n\nfunction mapStateToProps(state) {\n  return {\n    isLoading: state.admin.loading > 0\n  };\n}\n\nexport default compose(connect(mapStateToProps, {\n  crudCreate: crudCreateAction\n}), translate)(CreateController);","map":null,"metadata":{},"sourceType":"module"}