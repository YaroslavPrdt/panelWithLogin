{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { createElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\nimport createHistory from 'history/createHashHistory';\nimport { Switch, Route } from 'react-router-dom';\nimport { ConnectedRouter } from 'react-router-redux';\nimport withContext from 'recompose/withContext';\nimport createAdminStore from './createAdminStore';\nimport TranslationProvider from './i18n/TranslationProvider';\nimport CoreAdminRouter from './CoreAdminRouter';\nvar componentPropType = PropTypes.oneOfType([PropTypes.func, PropTypes.string]);\n\nvar CoreAdmin =\n/** @class */\nfunction (_super) {\n  __extends(CoreAdmin, _super);\n\n  function CoreAdmin(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.reduxIsAlreadyInitialized = false;\n    _this.history = null;\n\n    if (context.store) {\n      _this.reduxIsAlreadyInitialized = true;\n\n      if (!props.history) {\n        throw new Error(\"Missing history prop.\\nWhen integrating react-admin inside an existing redux Provider, you must provide the same 'history' prop to the <Admin> as the one used to bootstrap your routerMiddleware.\\nReact-admin uses this history for its own ConnectedRouter.\");\n      }\n\n      _this.history = props.history;\n    } else {\n      if (!props.dataProvider) {\n        throw new Error(\"Missing dataProvider prop.\\nReact-admin requires a valid dataProvider function to work.\");\n      }\n\n      _this.history = props.history || createHistory();\n    }\n\n    return _this;\n  }\n\n  CoreAdmin.prototype.renderCore = function () {\n    var _a = this.props,\n        appLayout = _a.appLayout,\n        authProvider = _a.authProvider,\n        children = _a.children,\n        _b = _a.customRoutes,\n        customRoutes = _b === void 0 ? [] : _b,\n        dashboard = _a.dashboard,\n        menu = _a.menu,\n        // deprecated, use a custom layout instead\n    catchAll = _a.catchAll,\n        theme = _a.theme,\n        _c = _a.title,\n        title = _c === void 0 ? 'React Admin' : _c,\n        loading = _a.loading,\n        loginPage = _a.loginPage,\n        logoutButton = _a.logoutButton;\n    var logout = authProvider ? createElement(logoutButton) : null;\n    return React.createElement(TranslationProvider, null, React.createElement(ConnectedRouter, {\n      history: this.history\n    }, React.createElement(Switch, null, React.createElement(Route, {\n      exact: true,\n      path: \"/login\",\n      render: function render(props) {\n        return createElement(loginPage, __assign({}, props, {\n          title: title\n        }));\n      }\n    }), React.createElement(Route, {\n      path: \"/\",\n      render: function render(props) {\n        return React.createElement(CoreAdminRouter, __assign({\n          appLayout: appLayout,\n          catchAll: catchAll,\n          customRoutes: customRoutes,\n          dashboard: dashboard,\n          loading: loading,\n          loginPage: loginPage,\n          logout: logout,\n          menu: menu,\n          theme: theme,\n          title: title\n        }, props), children);\n      }\n    }))));\n  };\n\n  CoreAdmin.prototype.render = function () {\n    return this.reduxIsAlreadyInitialized ? this.renderCore() : React.createElement(Provider, {\n      store: createAdminStore(__assign({}, this.props, {\n        history: this.history\n      }))\n    }, this.renderCore());\n  };\n\n  CoreAdmin.propTypes = {\n    appLayout: componentPropType,\n    authProvider: PropTypes.func,\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    catchAll: componentPropType,\n    customSagas: PropTypes.array,\n    customReducers: PropTypes.object,\n    customRoutes: PropTypes.array,\n    dashboard: componentPropType,\n    dataProvider: PropTypes.func,\n    history: PropTypes.object,\n    i18nProvider: PropTypes.func,\n    initialState: PropTypes.object,\n    loading: componentPropType,\n    locale: PropTypes.string,\n    loginPage: componentPropType,\n    logoutButton: componentPropType,\n    menu: componentPropType,\n    theme: PropTypes.object,\n    title: PropTypes.node\n  };\n  CoreAdmin.contextTypes = {\n    store: PropTypes.object\n  };\n  return CoreAdmin;\n}(React.Component);\n\nexport default withContext({\n  authProvider: PropTypes.func\n}, function (_a) {\n  var authProvider = _a.authProvider;\n  return {\n    authProvider: authProvider\n  };\n})(CoreAdmin);","map":null,"metadata":{},"sourceType":"module"}