{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { CRUD_GET_MATCHING_SUCCESS, CRUD_GET_MATCHING_FAILURE } from '../../../actions/dataActions';\nvar initialState = {};\nexport default (function (previousState, _a) {\n  if (previousState === void 0) {\n    previousState = initialState;\n  }\n\n  var type = _a.type,\n      payload = _a.payload,\n      meta = _a.meta;\n\n  var _b, _c;\n\n  switch (type) {\n    case CRUD_GET_MATCHING_SUCCESS:\n      return __assign({}, previousState, (_b = {}, _b[meta.relatedTo] = payload.data.map(function (record) {\n        return record.id;\n      }), _b));\n\n    case CRUD_GET_MATCHING_FAILURE:\n      return __assign({}, previousState, (_c = {}, _c[meta.relatedTo] = {\n        error: payload.error\n      }, _c));\n\n    default:\n      return previousState;\n  }\n});\nexport var getPossibleReferenceValues = function getPossibleReferenceValues(state, props) {\n  return state[props.referenceSource(props.resource, props.source)];\n};\nexport var getPossibleReferences = function getPossibleReferences(referenceState, possibleValues, selectedIds) {\n  if (selectedIds === void 0) {\n    selectedIds = [];\n  }\n\n  if (!possibleValues) {\n    return null;\n  }\n\n  if (possibleValues.error) {\n    return possibleValues;\n  }\n\n  possibleValues = Array.from(possibleValues);\n  selectedIds.forEach(function (id) {\n    return possibleValues.some(function (value) {\n      return value == id;\n    }) || possibleValues.unshift(id);\n  });\n  return possibleValues.map(function (id) {\n    return referenceState.data[id];\n  }).filter(function (r) {\n    return typeof r !== 'undefined';\n  });\n};","map":null,"metadata":{},"sourceType":"module"}